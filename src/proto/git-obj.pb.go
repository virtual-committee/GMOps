// Code generated by protoc-gen-go. DO NOT EDIT.
// source: src/proto/git-obj.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GitSignature struct {
	Name                 string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Email                string   `protobuf:"bytes,2,opt,name=Email,proto3" json:"Email,omitempty"`
	Time                 string   `protobuf:"bytes,3,opt,name=Time,proto3" json:"Time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GitSignature) Reset()         { *m = GitSignature{} }
func (m *GitSignature) String() string { return proto.CompactTextString(m) }
func (*GitSignature) ProtoMessage()    {}
func (*GitSignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4ecdf46c712e4c3, []int{0}
}

func (m *GitSignature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GitSignature.Unmarshal(m, b)
}
func (m *GitSignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GitSignature.Marshal(b, m, deterministic)
}
func (m *GitSignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GitSignature.Merge(m, src)
}
func (m *GitSignature) XXX_Size() int {
	return xxx_messageInfo_GitSignature.Size(m)
}
func (m *GitSignature) XXX_DiscardUnknown() {
	xxx_messageInfo_GitSignature.DiscardUnknown(m)
}

var xxx_messageInfo_GitSignature proto.InternalMessageInfo

func (m *GitSignature) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GitSignature) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *GitSignature) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

type GitCommit struct {
	ParentId             []string      `protobuf:"bytes,1,rep,name=ParentId,proto3" json:"ParentId,omitempty"`
	Author               *GitSignature `protobuf:"bytes,2,opt,name=Author,proto3" json:"Author,omitempty"`
	Committer            *GitSignature `protobuf:"bytes,3,opt,name=Committer,proto3" json:"Committer,omitempty"`
	Message              string        `protobuf:"bytes,4,opt,name=Message,proto3" json:"Message,omitempty"`
	TreeId               string        `protobuf:"bytes,5,opt,name=TreeId,proto3" json:"TreeId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GitCommit) Reset()         { *m = GitCommit{} }
func (m *GitCommit) String() string { return proto.CompactTextString(m) }
func (*GitCommit) ProtoMessage()    {}
func (*GitCommit) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4ecdf46c712e4c3, []int{1}
}

func (m *GitCommit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GitCommit.Unmarshal(m, b)
}
func (m *GitCommit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GitCommit.Marshal(b, m, deterministic)
}
func (m *GitCommit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GitCommit.Merge(m, src)
}
func (m *GitCommit) XXX_Size() int {
	return xxx_messageInfo_GitCommit.Size(m)
}
func (m *GitCommit) XXX_DiscardUnknown() {
	xxx_messageInfo_GitCommit.DiscardUnknown(m)
}

var xxx_messageInfo_GitCommit proto.InternalMessageInfo

func (m *GitCommit) GetParentId() []string {
	if m != nil {
		return m.ParentId
	}
	return nil
}

func (m *GitCommit) GetAuthor() *GitSignature {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *GitCommit) GetCommitter() *GitSignature {
	if m != nil {
		return m.Committer
	}
	return nil
}

func (m *GitCommit) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *GitCommit) GetTreeId() string {
	if m != nil {
		return m.TreeId
	}
	return ""
}

type GitTreeEntry struct {
	Id                   string   `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Type                 string   `protobuf:"bytes,3,opt,name=Type,proto3" json:"Type,omitempty"`
	Filemode             int32    `protobuf:"varint,4,opt,name=Filemode,proto3" json:"Filemode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GitTreeEntry) Reset()         { *m = GitTreeEntry{} }
func (m *GitTreeEntry) String() string { return proto.CompactTextString(m) }
func (*GitTreeEntry) ProtoMessage()    {}
func (*GitTreeEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4ecdf46c712e4c3, []int{2}
}

func (m *GitTreeEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GitTreeEntry.Unmarshal(m, b)
}
func (m *GitTreeEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GitTreeEntry.Marshal(b, m, deterministic)
}
func (m *GitTreeEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GitTreeEntry.Merge(m, src)
}
func (m *GitTreeEntry) XXX_Size() int {
	return xxx_messageInfo_GitTreeEntry.Size(m)
}
func (m *GitTreeEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_GitTreeEntry.DiscardUnknown(m)
}

var xxx_messageInfo_GitTreeEntry proto.InternalMessageInfo

func (m *GitTreeEntry) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GitTreeEntry) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GitTreeEntry) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *GitTreeEntry) GetFilemode() int32 {
	if m != nil {
		return m.Filemode
	}
	return 0
}

type GitTree struct {
	Id                   string          `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Entries              []*GitTreeEntry `protobuf:"bytes,2,rep,name=Entries,proto3" json:"Entries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GitTree) Reset()         { *m = GitTree{} }
func (m *GitTree) String() string { return proto.CompactTextString(m) }
func (*GitTree) ProtoMessage()    {}
func (*GitTree) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4ecdf46c712e4c3, []int{3}
}

func (m *GitTree) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GitTree.Unmarshal(m, b)
}
func (m *GitTree) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GitTree.Marshal(b, m, deterministic)
}
func (m *GitTree) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GitTree.Merge(m, src)
}
func (m *GitTree) XXX_Size() int {
	return xxx_messageInfo_GitTree.Size(m)
}
func (m *GitTree) XXX_DiscardUnknown() {
	xxx_messageInfo_GitTree.DiscardUnknown(m)
}

var xxx_messageInfo_GitTree proto.InternalMessageInfo

func (m *GitTree) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GitTree) GetEntries() []*GitTreeEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func init() {
	proto.RegisterType((*GitSignature)(nil), "proto.GitSignature")
	proto.RegisterType((*GitCommit)(nil), "proto.GitCommit")
	proto.RegisterType((*GitTreeEntry)(nil), "proto.GitTreeEntry")
	proto.RegisterType((*GitTree)(nil), "proto.GitTree")
}

func init() { proto.RegisterFile("src/proto/git-obj.proto", fileDescriptor_f4ecdf46c712e4c3) }

var fileDescriptor_f4ecdf46c712e4c3 = []byte{
	// 288 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xc1, 0x4e, 0x83, 0x40,
	0x10, 0x86, 0x03, 0x14, 0x90, 0xd1, 0x78, 0x58, 0x8d, 0x6e, 0x3c, 0x11, 0x4e, 0x4d, 0x4c, 0xdb,
	0xa8, 0x4f, 0x60, 0x4c, 0xad, 0x24, 0x6a, 0x0c, 0xf6, 0x05, 0x40, 0x26, 0xb8, 0xa6, 0xcb, 0x92,
	0x65, 0x7b, 0xe0, 0xd1, 0x7c, 0x3b, 0xb3, 0x03, 0xa5, 0x35, 0xc6, 0x13, 0xfb, 0x33, 0x5f, 0xe6,
	0xff, 0xe7, 0x87, 0xcb, 0x56, 0x7f, 0x2c, 0x1a, 0xad, 0x8c, 0x5a, 0x54, 0xc2, 0xcc, 0x54, 0xf1,
	0x35, 0x27, 0xc5, 0x7c, 0xfa, 0x24, 0xcf, 0x70, 0xb2, 0x12, 0xe6, 0x5d, 0x54, 0x75, 0x6e, 0xb6,
	0x1a, 0x19, 0x83, 0xc9, 0x6b, 0x2e, 0x91, 0x3b, 0xb1, 0x33, 0x8d, 0x32, 0x7a, 0xb3, 0x73, 0xf0,
	0x97, 0x32, 0x17, 0x1b, 0xee, 0xd2, 0xcf, 0x5e, 0x58, 0x72, 0x2d, 0x24, 0x72, 0xaf, 0x27, 0xed,
	0x3b, 0xf9, 0x76, 0x20, 0x5a, 0x09, 0xf3, 0xa0, 0xa4, 0x14, 0x86, 0x5d, 0xc1, 0xd1, 0x5b, 0xae,
	0xb1, 0x36, 0x69, 0xc9, 0x9d, 0xd8, 0x9b, 0x46, 0xd9, 0xa8, 0xd9, 0x35, 0x04, 0xf7, 0x5b, 0xf3,
	0xa9, 0x34, 0x2d, 0x3d, 0xbe, 0x3d, 0xeb, 0x63, 0xcd, 0x0f, 0xc3, 0x64, 0x03, 0xc2, 0x6e, 0x20,
	0xea, 0x57, 0x1a, 0xd4, 0xe4, 0xf7, 0x0f, 0xbf, 0xa7, 0x18, 0x87, 0xf0, 0x05, 0xdb, 0x36, 0xaf,
	0x90, 0x4f, 0x28, 0xe0, 0x4e, 0xb2, 0x0b, 0x08, 0xd6, 0x1a, 0x31, 0x2d, 0xb9, 0x4f, 0x83, 0x41,
	0x25, 0x05, 0x35, 0x61, 0xc5, 0xb2, 0x36, 0xba, 0x63, 0xa7, 0xe0, 0x52, 0x6e, 0xcb, 0xb8, 0x69,
	0x39, 0x36, 0xe3, 0x1e, 0x34, 0x63, 0x3b, 0xe8, 0x9a, 0x7d, 0x07, 0x5d, 0x83, 0xf6, 0xea, 0x47,
	0xb1, 0x41, 0xa9, 0xca, 0xde, 0xda, 0xcf, 0x46, 0x9d, 0x3c, 0x41, 0x38, 0x78, 0xfc, 0x59, 0x3f,
	0x83, 0xd0, 0xfa, 0x0a, 0x6c, 0xb9, 0x1b, 0x7b, 0xbf, 0x2f, 0x1c, 0x43, 0x65, 0x3b, 0xa6, 0x08,
	0x68, 0x78, 0xf7, 0x13, 0x00, 0x00, 0xff, 0xff, 0xbf, 0x3e, 0xb2, 0xd2, 0xe0, 0x01, 0x00, 0x00,
}
